const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();

const mongoURI = 'mongodb://localhost/doctezDB'; // Replace with your MongoDB connection URL

mongoose
  .connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.error(err));

app.use(bodyParser.json());

const DoctorSchema = new mongoose.Schema({
  name: String,
  specialty: String,
  availability: String,
  fees: Number,
});

const Doctor = mongoose.model('Doctor', DoctorSchema);

app.post('/api/doctors', async (req, res) => {
  const { name, specialty, availability, fees } = req.body;
  const newDoctor = new Doctor({ name, specialty, availability, fees });
  try {
    await newDoctor.save();
    res.status(201).json(newDoctor);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error creating doctor profile' });
  }
});

app.get('/api/doctors', async (req, res) => {
  try {
    const doctors = await Doctor.find();
    res.status(200).json(doctors);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error fetching doctor profiles' });
  }
});

app.put('/api/doctors/:id', async (req, res) => {
  const { id } = req.params;
  const { name, specialty, availability, fees } = req.body;
  try {
    const updatedDoctor = await Doctor.findByIdAndUpdate(
      id,
      { name, specialty, availability, fees },
      { new: true }
    );
    res.status(200).json(updatedDoctor);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error updating doctor profile' });
  }
});

app.delete('/api/doctors/:id', async (req, res) => {
  const { id } = req.params;
  try {
    await Doctor.findByIdAndRemove(id);
    res.status(204).end();
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Error deleting doctor profile' });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
